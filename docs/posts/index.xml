<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Java Principal</title>
    <link>https://akhilesh006.github.io/javaprincipal/posts/</link>
    <description>Recent content in Posts on Java Principal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Jun 2020 08:17:23 +0530</lastBuildDate>
    
	<atom:link href="https://akhilesh006.github.io/javaprincipal/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Threading</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/java-threading/</link>
      <pubDate>Tue, 02 Jun 2020 08:17:23 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/java-threading/</guid>
      <description>Thread:   Thread can be created by new Thread() only.
  Each object in Java is associated with a monitor, which a thread can lock or unlock. Only one thread at a time may hold a lock on a monitor. Any other threads attempting to lock that monitor are blocked until they can obtain a lock on that monitor.
   If execution of the body is ever completed, either normally or abruptly, an unlock action is automatically performed on that same monitor.</description>
    </item>
    
    <item>
      <title>Wrapper Class Caching</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/java-wrapper-caching/</link>
      <pubDate>Sun, 31 May 2020 19:18:47 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/java-wrapper-caching/</guid>
      <description>Wrapper Class Caching: Added in JAVA 5. It is used to improve the performance and save memory. It only works on autoboxing.
 Byte : private static ByteCache inner class : Range -127 to +127 Short : private static ShortCache inner class : Range -127 to +127 Long : private static LongCache inner class : Range -127 to +127 Integer : private static IntegerCache inner class : Range -127 to +127 Character : private static CharacterCache inner class : Range 0 to +127  We can be modified this range only for Integer by using a VM argument -XX:AutoBoxCacheMax=size</description>
    </item>
    
    <item>
      <title>Memory Model</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/java-memory-model/</link>
      <pubDate>Sun, 31 May 2020 03:49:42 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/java-memory-model/</guid>
      <description>Heap Dynamic memory area and Shared among all threads of an application. When full, We get java.lang.OutOfMemoryError.
- Young Generation Area:- Eden Space: Newly created Objects goes in Eden Space.- Survivor Space: ( Two survivor space s0 &amp;amp; s1): When Eden space is filled, Miner GC is performed and all survivor object moved into survivor space.- Old/Tenured Generation Area: The remaining objects moved into Old generation which are survivor after many cycle of miner GC.</description>
    </item>
    
  </channel>
</rss>