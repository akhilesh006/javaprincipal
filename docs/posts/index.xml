<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Java Principal</title>
    <link>https://akhilesh006.github.io/javaprincipal/posts/</link>
    <description>Recent content in Posts on Java Principal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Jun 2020 11:55:55 +0530</lastBuildDate>
    
	<atom:link href="https://akhilesh006.github.io/javaprincipal/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/common-tips-and-tricks-for-cp/</link>
      <pubDate>Mon, 08 Jun 2020 11:55:55 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/common-tips-and-tricks-for-cp/</guid>
      <description>Common Tips &amp;amp; Tricks for Competitive Programming. Big-O: Time Complexity Order O(1) &amp;lt; O(log n) &amp;lt; O(\sqrt{n}) &amp;lt; n &amp;lt; n log n &amp;lt; n&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt; &amp;lt; n&amp;lt;sup&amp;gt;3&amp;lt;/sup&amp;gt; ... &amp;lt; 2&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt; &amp;lt; 3&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt; ... &amp;lt; n! &amp;lt; n&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt;   nCr   If you have a list of numbers and wants to count the number of pair can be formed in a list. e.g. Problem Statement : CodeChef : PLMU</description>
    </item>
    
    <item>
      <title>Tech Interview Preparation</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/interview-prep-topics/</link>
      <pubDate>Sun, 07 Jun 2020 19:29:13 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/interview-prep-topics/</guid>
      <description>Tech Interview Preparation Following are the best posts of Leetcode platform on data-structure and algorithms.
 DP for beginners by @wh0ami  LIST   Graph for beginners by @wh0ami  LIST   Sliding window for beginners by @wh0ami  LIST   DP Patterns by @aatalyk Leetcode patterns from edu_cative_dot_io by @late_riser List of questions sorted by common patterns by @Maverick2594 How to solve DP - String? Template and 4 Steps to be followed by @igooglethings Using bit manipulation to solve problems easily and efficiently by @LHearen Recursive approach to segment trees and range sum queries and lazy propagation How to use Leetcode efficiently and effectively by beginners by @megaspazz Dynamic Programming Questions thread by @karansingh1559 DP Classification helpful notes by @adityakrverma Comprehensive Data Structure and Algorithm Study Guide by @xrssa Backtracking Summary and general template to solve many problems by @dichen001 How to approach DP problems by @heroes3001 A general approach to backtracking questions by @issac3 Top 75 Leetcode questions for interview preparation curated by Blind Topic wise problems for beginners by @yashrsharma44 Sliding Window algorithm template to solve all the Leetcode substring search problem by @chaoyanghe Greedy for beginners by @wh0ami  LIST   From-good-to-great.</description>
    </item>
    
    <item>
      <title>Threading</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/java-threading/</link>
      <pubDate>Tue, 02 Jun 2020 08:17:23 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/java-threading/</guid>
      <description>Thread:   Thread can be created by new Thread() only.
  Each object in Java is associated with a monitor, which a thread can lock or unlock. Only one thread at a time may hold a lock on a monitor. Any other threads attempting to lock that monitor are blocked until they can obtain a lock on that monitor.
   If execution of the body is ever completed, either normally or abruptly, an unlock action is automatically performed on that same monitor.</description>
    </item>
    
    <item>
      <title>Wrapper Class Caching</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/java-wrapper-caching/</link>
      <pubDate>Sun, 31 May 2020 19:18:47 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/java-wrapper-caching/</guid>
      <description>Wrapper Class Caching: Added in JAVA 5. It is used to improve the performance and save memory. It only works on autoboxing.
 Byte : private static ByteCache inner class : Range -127 to +127 Short : private static ShortCache inner class : Range -127 to +127 Long : private static LongCache inner class : Range -127 to +127 Integer : private static IntegerCache inner class : Range -127 to +127 Character : private static CharacterCache inner class : Range 0 to +127  We can be modified this range only for Integer by using a VM argument -XX:AutoBoxCacheMax=size</description>
    </item>
    
    <item>
      <title>Memory Model</title>
      <link>https://akhilesh006.github.io/javaprincipal/posts/java/java-memory-model/</link>
      <pubDate>Sun, 31 May 2020 03:49:42 +0530</pubDate>
      
      <guid>https://akhilesh006.github.io/javaprincipal/posts/java/java-memory-model/</guid>
      <description>Heap Dynamic memory area and Shared among all threads of an application. When full, We get java.lang.OutOfMemoryError.
- Young Generation Area:- Eden Space: Newly created Objects goes in Eden Space.- Survivor Space: ( Two survivor space s0 &amp;amp; s1): When Eden space is filled, Miner GC is performed and all survivor object moved into survivor space.- Old/Tenured Generation Area: The remaining objects moved into Old generation which are survivor after many cycle of miner GC.</description>
    </item>
    
  </channel>
</rss>